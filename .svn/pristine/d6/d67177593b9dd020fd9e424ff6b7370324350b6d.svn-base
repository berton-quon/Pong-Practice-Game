using System;
using GDIDrawer;
using System.Drawing;
using System.Text;
using System.Windows.Forms;


namespace Lab_2
{
    class Program
    {
        static void Main(string[] args)
        {
            int borderTop;              //creates top border
            int borderRight;            //creates right border
            int borderBottom;           //creates bottom border
            int xBall;                  //x position of ball
            int yBall;                  //y position of ball
            int xStart;                 //starting direction of xBall
            int yStart;                 //starting direction of yBall
            int xVel = 5;               //x velocity of ball
            int yVel = 5;               //y velocity of ball



            //create game window
            CDrawer canvas = new CDrawer();
            canvas.Scale = 5;

            //create top border
            for (borderTop = 0; borderTop < 160; borderTop++)
            {
                canvas.SetBBScaledPixel(borderTop, 0, Color.Blue);
            }
 
            //create right border
            for (borderRight = 0; borderRight < 120; borderRight++)
            {
                canvas.SetBBScaledPixel(159, borderRight, Color.Blue);
            }

            //create bottom border
            for (borderBottom = 0; borderBottom < 160; borderBottom++)
            {
                canvas.SetBBScaledPixel(borderBottom, 119, Color.Blue);
            }

            //add clickable start button, then add small delay before game starts 
            Button button1 = new Button();
            button1.DialogResult = DialogResult.OK;




            //generate ball at random location (located on R side of screen to start further away from paddle)
            Random rand = new Random();
            xBall = rand.Next(50, 159);
            yBall = rand.Next(1, 119);
            xStart = rand.Next(1, 3);
            yStart = rand.Next(1, 3);

            while (xBall > 0 && xBall < 160)
            {
                canvas.Clear();
                canvas.AddRectangle(xBall, yBall, 2, 2, Color.Red);
                System.Threading.Thread.Sleep(20);


                switch (xStart)
                {
                    case 1:
                        xBall++;
                        break;
                    case 2:
                        xBall--;
                        break;
                    default:
                        break;
                }
                    
                switch (yStart)
                {
                    case 1:
                        yBall++;
                        break;
                    case 2:
                        yBall--;
                        break;
                    default:
                        break;
                }

            }
            
            //need to add randomness of x and y directions of ball - random number generater with range of 2?

            //if criteria for when xBall = 160
            //if criteria for when yBall = 0 or 120


            //add criteria for when it 'hits' walls and following action

            //if criteria for when xBall = 0


            //location = border locations 
            //change direction

            //add paddle using Y movement of mouse

            //integrate scoring system

            //display score and option to play again or quit



            Console.ReadLine();

  
            
        }
    }
}
